{
     "llm_config": {
       "fallbacks": [
            {
                "class": "primary-gpt",
                "model_name": "gpt-4",
                "verbose": "true",
                "top_p":0,
                "seed":43,
                "OPENAI_PROXY": "None",
                "OPENAI_API_TYPE": "azure",
            },
            {
                "class": "fallback-gpt",
                "model_name": "gpt-4o",
                "verbose": "true",
                "top_p":0,
                "seed":43,
                "OPENAI_PROXY": "None",
                "OPENAI_API_TYPE": "azure",
            }
        ]
    },

    "commondefs": {
        "replacement_strings": {
            "instructions_prefix": """You are a multi-agent orchestrator tasked with identifying the most suitable tool to address the user's query.
            Instead of relying on your own knowledge or expertise,
            you should generate responses based on the information provided by the downstream agents' tools""",

        "aaosa_instructions": """Your tools act as your down-chain agents. Do not make assumptions as to what you can or cannot do.
                     When handling an inquiry, follow these steps:

0. Call the onec_pla for every single query regardless of claim.
1.Once the strongest claim is determined among the claims provided by all the tools, choose to call the tool having strongest claim if you are satisfied, or ask the user to rephrase the query. Additionally, do not show the strength, claim, internal tools claims, etc in your final response.
2. Call only the tools responsible for addressing the inquiry.
3. Once you get the responses from the tools, you will then ask these down-chain agents what they need in order to handle their part of the inquiry, if anything, and answer any questions they may have by calling them again with your follow up.
4. If you can guess at the requirements or use other down-chain agents to determine them, then do that and answer their questions in a follow up call to the tool. Otherwise, ask the user.
5. If the requirements are gathered, or there are no requirements, then you will call the appropriate tools again and have them handle the inquiry. Note that the down-chain might be a few levels below, so you should call the tool that will lead to that down-chain (i.e., down-chain to you, but up-chain to the responsible agent).
6. Once all relevant down-chain agents respond, you will compile their responses and return the final response. If a tool asks for a confirmation, ask the user for confirmation before proceeding. 
7. Return same adaptive card JSON what we are getting from your tools immediately.
8. If a task has been executed, provide the tool's summary response. You may, in turn, be called by other agents in the system and have to act as a down-chain to them. Do NOT answer before you've called your tools
9. Return the exact exception message in case of errors response should be in Adaptive Card JSON format.

10.If the response from the tool is not valid or appropriate, call the second most claimed tool to get the response and return it.***

Important:*** If the tool's response is already in Adaptive Card JSON format, return it as is. Otherwise, convert the tool response into Adaptive Card JSON format without adding any action buttons or extra text on your own.***

You may, in turn, be called by other agents in the system and have to act as a down-chain to them.
Do NOT answer before you've called your tools.

"""
        },
        "replacement_values": {
            "aaosa_call": {
                "description": "Depending on the mode, returns a natural language string in response.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "inquiry": {
                            "type": "string",
                            "description": "The inquiry"
                        },
                        "mode": {
                            "type": "string",
                            "description": """
            'Determine' to ask the agent if the inquiry belongs to it, in its entirety or in part.
            'Fulfill' to ask the agent to fulfill the inquiry, if it can.
            'Follow up' to ask the agent to respond to a follow up.
                                """
                            },
                        },
                        "required": [
                            "inquiry",
                            "mode"
                        ]
                    }
            },
            "aaosa_command": """
If mode is 'Determine', return a json block with the following fields:
{
    "Name": <your name>,
    "Inquiry": <the inquiry>,
    "Mode": <Determine | Fulfill>,
    "Relevant": <Yes | No>,
    "Strength": <number between 1 and 10 representing how certain you are in your claim>,
    "Claim:" <All | Partial>,
    "Requirements" <None | list of requirements>
}
If mode is 'Fulfill' or "Follow up", respond to the inquiry and return a json block with the following fields:
{
    "Name": <your name>,
    "Inquiry": <the inquiry>,
    "Mode": Fulfill,
    "Response" <your response>
}
"""
        }
    },
    "tools": [
        {
            "name": "OneCPla",
            "function": {
                "description": "As a LearningNavigator,your an dedicated Personalized Learning Assistant (PLA) designed to enhance your educational journey. I provide insightful answers to your learning and related questions, engage in meaningful conversations, and recommend tailored courses based on your unique needs and preferences. Whether you're seeking to deepen your knowledge, explore new subjects, or stay updated with the latest educational policies, LearningNavigator is here to guide you every step of the way.",
                    "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The query that the employee needs clarification on"
                        }
                    },
                    "required": ["query"]
                }
            },
            "verbose":true,
            "error_formatter": "json",
            "error_fragments": ["TypeError:","ResponsibleAIPolicyViolation","Rate limit is exceeded"],
            "max_message_history":10,
            "instructions": "{instructions_prefix} You are the top-level agent responsible for handling all inquiries to Cognizant's intranet chatbot. {aaosa_instructions} When interacting with the user, act as the single point of interaction. No need to mention the other tools or agents. If there are any requirements that need user input, ask them one at a time, with clear examples of the choices available. If your response does not include any URLs, then add an URL for OneCognizant to the response, just to be helpful.",
            "tools": ["onec_pla"]
            "allow": {
                "sly_data": {
                    "associate_id": true,
                    "AgentName": true,
                    "Botid":true,
                    "Is_Autonomous_Agent": true,
                    "Is_ChatContext_Required": true,
                    "Is_SessionID_Required": true,
                    "Agent_Generated_Session_ID": true
                },
                "to_upstream": {
                    "sly_data": ["associate_id","IntentID","AgentName","Is_Autonomous_Agent","Is_ChatContext_Required","Is_SessionID_Required","Agent_Generated_Session_ID"]
                }
            },
        },
        {
            "name": "onec_pla",
            "function": {
                "description": "{instructions_prefix} The Personalized Learning Assistant (PLA) helps users with learning and policy-related questions. It answers queries, engages in conversations, and recommends courses based on user-provided details. This tool is used to get the FAQs and policy details {aaosa_instructions}.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The question or query the user needs help with"
                        }
                    },
                    "required": ["query"]
                }
            },
            "class": "pla.PLATool",
            "command": "Call the API to answer a query or recommend courses."
        }
    ]
}